{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Deep ensemble for ENSO-forecasting\n",
    "\n",
    "In this tutorial you learn how to use a neural network model called Deep Ensemble (DE) for the ENSO forecasting. This network architecture was initially developed [Lakshminarayanan et al. (2017)](https://papers.nips.cc/paper/7219-simple-and-scalable-predictive-uncertainty-estimation-using-deep-ensembles.pdf). \n",
    "\n",
    "DEs are feed foreword neural networks that predict the mean and the standard deviation of a Gaussian. Hence, their predicion comes with an uncertainty estimation which is a valuable feature for ENSO-forecasting."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Create a data pipe line\n",
    "\n",
    "At first, we define a data pipeline. This is in general quite useful to keep your code clean and also to reuse the pipeline for later purpose.\n",
    "\n",
    "The data pipeline generates returns:\n",
    "\n",
    "1. The feature array\n",
    "\n",
    "2. The label array\n",
    "\n",
    "3. The time  array corresponding to the time of the label\n",
    "\n",
    "NOTE (again): Lead time is defined as the time that passed between the last observed and the first date of the target season. Hence, negative appear, e.g. if you compare the DJF season with the target season JFM, you have a lead time of -2 month (Last observed date: Feburary 28/29, First date of the target season January 1)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/paul/miniconda2/envs/ninolearn/lib/python3.6/site-packages/distributed/utils.py:139: RuntimeWarning: Couldn't detect a suitable IP address for reaching '8.8.8.8', defaulting to '127.0.0.1': [Errno 101] Network is unreachable\n",
      "  RuntimeWarning,\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "from ninolearn.utils import include_time_lag\n",
    "from ninolearn.IO.read_post import data_reader\n",
    "\n",
    "def pipeline(lead_time):\n",
    "    \"\"\"\n",
    "    Data pipeline for the processing of the data before the Deep Ensemble\n",
    "    is trained.\n",
    "\n",
    "    :type lead_time: int\n",
    "    :param lead_time: The lead time in month.\n",
    "\n",
    "    :returns: The feature \"X\" (at observation time), the label \"y\" (at lead\n",
    "    time), the target season \"timey\" (least month)\n",
    "    \"\"\"\n",
    "    reader = data_reader(startdate='1980-01', enddate='2018-12')\n",
    "\n",
    "    # indeces\n",
    "    oni = reader.read_csv('oni')\n",
    "    iod = reader.read_csv('iod')\n",
    "    wwv = reader.read_csv('wwv')\n",
    "\n",
    "    # seasonal cycle\n",
    "    sc = np.cos(np.arange(len(oni))/12*2*np.pi)\n",
    "\n",
    "    # network metrics\n",
    "    network_ssh = reader.read_statistic('network_metrics', variable='sst', dataset='ERSSTv5', processed=\"anom\")\n",
    "    c2 = network_ssh['fraction_clusters_size_2']\n",
    "    H = network_ssh['corrected_hamming_distance']\n",
    "\n",
    "    # time lag\n",
    "    time_lag = 12\n",
    "\n",
    "    # shift such that lead time corresponds to the definition of lead time\n",
    "    shift = 3\n",
    "\n",
    "    # process features\n",
    "    feature_unscaled = np.stack((oni, sc, wwv, iod,\n",
    "                                 c2, H), axis=1)\n",
    "\n",
    "    # scale each feature\n",
    "    scalerX = StandardScaler()\n",
    "    Xorg = scalerX.fit_transform(feature_unscaled)\n",
    "\n",
    "    # set nans to 0.\n",
    "    Xorg = np.nan_to_num(Xorg)\n",
    "\n",
    "    # arange the feature array\n",
    "    X = Xorg[:-lead_time-shift,:]\n",
    "    X = include_time_lag(X, max_lag=time_lag)\n",
    "\n",
    "    # arange label\n",
    "    yorg = oni.values\n",
    "    y = yorg[lead_time + time_lag + shift:]\n",
    "\n",
    "    # get the time axis of the label\n",
    "    timey = oni.index[lead_time + time_lag + shift:]\n",
    "\n",
    "    return X, y, timey"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Split the data set\n",
    "\n",
    "For the training and testing of machine learning models it is crucial to split the data set into:\n",
    "\n",
    "1. __Train data set__ which is used to train the weights of the neural network\n",
    "\n",
    "2. __Validation data set__ which is used to check for overfitting (e.g. when using early stopping) and to optimize the hyperparameters \n",
    "\n",
    "3. __Test data set__ which is used to to evaluate the trained model. \n",
    "\n",
    "__NOTE:__ It is important to understand that hyperparamters must be tuned so that the result is best for the Validation data set and __not__ for the test data set. Otherwise you can not rule out the case that the specific hyperparameter setting just works good for the specific test data set but is not generally a good hyperparameter setting.\n",
    "\n",
    "In the following cell the train and the validation data set are still one data set, because this array will be later splitted into two arrays when th model is fitted."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "import keras.backend as K\n",
    "from ninolearn.learn.models.dem import DEM\n",
    "\n",
    "# clear memory from previous sessions\n",
    "K.clear_session()\n",
    "\n",
    "# define the lead time\n",
    "lead_time = 3\n",
    "\n",
    "# get the features (X), the label (y) and \n",
    "# the time axis of the label (timey)\n",
    "X, y, timey = pipeline(lead_time)\n",
    "\n",
    "# split the data set into \n",
    "test_indeces = (timey>='2001-01-01') & (timey<='2018-12-01')\n",
    "train_val_indeces = np.invert(test_indeces)\n",
    "\n",
    "train_val_X, train_val_y, train_val_timey = X[train_val_indeces,:], y[train_val_indeces], timey[train_val_indeces]\n",
    "testX, testy, testtimey = X[test_indeces,:], y[test_indeces], timey[test_indeces]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Fit the model\n",
    "\n",
    "Now it is time to train the model! For this a random search is used for all keyword arguments that are passed in a *list* to the DEM.set_parameters() method. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "##################################################################\n",
      "Search iteration Nr 1/20\n",
      "##################################################################\n",
      "\n",
      "Train member Nr 1/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 45us/step\n",
      "Train member Nr 2/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 76us/step\n",
      "Train member Nr 3/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 61us/step\n",
      "Train member Nr 4/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 79us/step\n",
      "Train member Nr 5/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 45us/step\n",
      "Computation time: 8.4s\n",
      "New best hyperparameters\n",
      "--------------------------------------\n",
      "Mean loss: 0.34392209892849557\n",
      "{'layers': 1, 'neurons': 16, 'dropout': 0.12378305611318924, 'noise_in': 0.13682762378098945, 'noise_mu': 0.1594007153319167, 'noise_sigma': 0.26941913115524324, 'l1_hidden': 0.15920416814139493, 'l2_hidden': 0.14973220769991027, 'l1_mu': 0.0968840864748789, 'l2_mu': 0.18567445044732792, 'l1_sigma': 0.1606583760628583, 'l2_sigma': 0.02928805643650441, 'lr': 0.0054775495740690665, 'batch_size': 100}\n",
      "\n",
      "##################################################################\n",
      "Search iteration Nr 2/20\n",
      "##################################################################\n",
      "\n",
      "Train member Nr 1/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 51us/step\n",
      "Train member Nr 2/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 45us/step\n",
      "Train member Nr 3/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 46us/step\n",
      "Train member Nr 4/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 51us/step\n",
      "Train member Nr 5/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 78us/step\n",
      "Computation time: 9.3s\n",
      "New best hyperparameters\n",
      "--------------------------------------\n",
      "Mean loss: 0.3435987807486368\n",
      "{'layers': 1, 'neurons': 16, 'dropout': 0.25141333998178195, 'noise_in': 0.2329862534019585, 'noise_mu': 0.2813460046840733, 'noise_sigma': 0.14595068639744221, 'l1_hidden': 0.08553348071011933, 'l2_hidden': 0.11981746410750115, 'l1_mu': 0.10558548934586615, 'l2_mu': 0.05080434557231146, 'l1_sigma': 0.037151218694687606, 'l2_sigma': 0.19769939661821626, 'lr': 0.006687247196565577, 'batch_size': 100}\n",
      "\n",
      "##################################################################\n",
      "Search iteration Nr 3/20\n",
      "##################################################################\n",
      "\n",
      "Train member Nr 1/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 81us/step\n",
      "Train member Nr 2/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 47us/step\n",
      "Train member Nr 3/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 121us/step\n",
      "Train member Nr 4/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 49us/step\n",
      "Train member Nr 5/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 66us/step\n",
      "Computation time: 10.3s\n",
      "New best hyperparameters\n",
      "--------------------------------------\n",
      "Mean loss: 0.11411247535244277\n",
      "{'layers': 1, 'neurons': 16, 'dropout': 0.30452543907304586, 'noise_in': 0.21534727932400557, 'noise_mu': 0.2830000465254644, 'noise_sigma': 0.20073478581880644, 'l1_hidden': 0.08204434904474006, 'l2_hidden': 0.15817156327512816, 'l1_mu': 0.044876511619725834, 'l2_mu': 0.07501615431427888, 'l1_sigma': 0.13807434833687507, 'l2_sigma': 0.003930864203235141, 'lr': 0.005892578009524626, 'batch_size': 100}\n",
      "\n",
      "##################################################################\n",
      "Search iteration Nr 4/20\n",
      "##################################################################\n",
      "\n",
      "Train member Nr 1/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 44us/step\n",
      "Train member Nr 2/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 84us/step\n",
      "Train member Nr 3/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 90us/step\n",
      "Train member Nr 4/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 50us/step\n",
      "Train member Nr 5/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 64us/step\n",
      "Computation time: 8.7s\n",
      "\n",
      "##################################################################\n",
      "Search iteration Nr 5/20\n",
      "##################################################################\n",
      "\n",
      "Train member Nr 1/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 43us/step\n",
      "Train member Nr 2/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 86us/step\n",
      "Train member Nr 3/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 73us/step\n",
      "Train member Nr 4/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 49us/step\n",
      "Train member Nr 5/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 85us/step\n",
      "Computation time: 9.3s\n",
      "\n",
      "##################################################################\n",
      "Search iteration Nr 6/20\n",
      "##################################################################\n",
      "\n",
      "Train member Nr 1/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 43us/step\n",
      "Train member Nr 2/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 49us/step\n",
      "Train member Nr 3/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 49us/step\n",
      "Train member Nr 4/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 45us/step\n",
      "Train member Nr 5/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 64us/step\n",
      "Computation time: 10.0s\n",
      "\n",
      "##################################################################\n",
      "Search iteration Nr 7/20\n",
      "##################################################################\n",
      "\n",
      "Train member Nr 1/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 74us/step\n",
      "Train member Nr 2/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 47us/step\n",
      "Train member Nr 3/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 49us/step\n",
      "Train member Nr 4/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 49us/step\n",
      "Train member Nr 5/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 55us/step\n",
      "Computation time: 9.2s\n",
      "\n",
      "##################################################################\n",
      "Search iteration Nr 8/20\n",
      "##################################################################\n",
      "\n",
      "Train member Nr 1/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 43us/step\n",
      "Train member Nr 2/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 49us/step\n",
      "Train member Nr 3/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 49us/step\n",
      "Train member Nr 4/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 47us/step\n",
      "Train member Nr 5/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 67us/step\n",
      "Computation time: 8.9s\n",
      "\n",
      "##################################################################\n",
      "Search iteration Nr 9/20\n",
      "##################################################################\n",
      "\n",
      "Train member Nr 1/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 46us/step\n",
      "Train member Nr 2/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 70us/step\n",
      "Train member Nr 3/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 130us/step\n",
      "Train member Nr 4/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 44us/step\n",
      "Train member Nr 5/5\n",
      "--------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "46/46 [==============================] - 0s 47us/step\n",
      "Computation time: 9.8s\n",
      "\n",
      "##################################################################\n",
      "Search iteration Nr 10/20\n",
      "##################################################################\n",
      "\n",
      "Train member Nr 1/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 43us/step\n",
      "Train member Nr 2/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 109us/step\n",
      "Train member Nr 3/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 48us/step\n",
      "Train member Nr 4/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 83us/step\n",
      "Train member Nr 5/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 50us/step\n",
      "Computation time: 8.5s\n",
      "\n",
      "##################################################################\n",
      "Search iteration Nr 11/20\n",
      "##################################################################\n",
      "\n",
      "Train member Nr 1/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 46us/step\n",
      "Train member Nr 2/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 46us/step\n",
      "Train member Nr 3/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 67us/step\n",
      "Train member Nr 4/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 63us/step\n",
      "Train member Nr 5/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 93us/step\n",
      "Computation time: 8.7s\n",
      "\n",
      "##################################################################\n",
      "Search iteration Nr 12/20\n",
      "##################################################################\n",
      "\n",
      "Train member Nr 1/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 57us/step\n",
      "Train member Nr 2/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 82us/step\n",
      "Train member Nr 3/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 73us/step\n",
      "Train member Nr 4/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 64us/step\n",
      "Train member Nr 5/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 60us/step\n",
      "Computation time: 9.3s\n",
      "\n",
      "##################################################################\n",
      "Search iteration Nr 13/20\n",
      "##################################################################\n",
      "\n",
      "Train member Nr 1/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 57us/step\n",
      "Train member Nr 2/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 47us/step\n",
      "Train member Nr 3/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 46us/step\n",
      "Train member Nr 4/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 78us/step\n",
      "Train member Nr 5/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 54us/step\n",
      "Computation time: 8.9s\n",
      "\n",
      "##################################################################\n",
      "Search iteration Nr 14/20\n",
      "##################################################################\n",
      "\n",
      "Train member Nr 1/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 47us/step\n",
      "Train member Nr 2/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 72us/step\n",
      "Train member Nr 3/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 54us/step\n",
      "Train member Nr 4/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 54us/step\n",
      "Train member Nr 5/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 95us/step\n",
      "Computation time: 8.6s\n",
      "\n",
      "##################################################################\n",
      "Search iteration Nr 15/20\n",
      "##################################################################\n",
      "\n",
      "Train member Nr 1/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 48us/step\n",
      "Train member Nr 2/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 50us/step\n",
      "Train member Nr 3/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 48us/step\n",
      "Train member Nr 4/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 57us/step\n",
      "Train member Nr 5/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 79us/step\n",
      "Computation time: 8.6s\n",
      "\n",
      "##################################################################\n",
      "Search iteration Nr 16/20\n",
      "##################################################################\n",
      "\n",
      "Train member Nr 1/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 52us/step\n",
      "Train member Nr 2/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 60us/step\n",
      "Train member Nr 3/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 42us/step\n",
      "Train member Nr 4/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 58us/step\n",
      "Train member Nr 5/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 83us/step\n",
      "Computation time: 8.9s\n",
      "\n",
      "##################################################################\n",
      "Search iteration Nr 17/20\n",
      "##################################################################\n",
      "\n",
      "Train member Nr 1/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 97us/step\n",
      "Train member Nr 2/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 39us/step\n",
      "Train member Nr 3/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 84us/step\n",
      "Train member Nr 4/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 79us/step\n",
      "Train member Nr 5/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 70us/step\n",
      "Computation time: 13.1s\n",
      "\n",
      "##################################################################\n",
      "Search iteration Nr 18/20\n",
      "##################################################################\n",
      "\n",
      "Train member Nr 1/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 54us/step\n",
      "Train member Nr 2/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 45us/step\n",
      "Train member Nr 3/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 50us/step\n",
      "Train member Nr 4/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 109us/step\n",
      "Train member Nr 5/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 78us/step\n",
      "Computation time: 10.5s\n",
      "\n",
      "##################################################################\n",
      "Search iteration Nr 19/20\n",
      "##################################################################\n",
      "\n",
      "Train member Nr 1/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 92us/step\n",
      "Train member Nr 2/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 59us/step\n",
      "Train member Nr 3/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 45us/step\n",
      "Train member Nr 4/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 81us/step\n",
      "Train member Nr 5/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 75us/step\n",
      "Computation time: 8.6s\n",
      "\n",
      "##################################################################\n",
      "Search iteration Nr 20/20\n",
      "##################################################################\n",
      "\n",
      "Train member Nr 1/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 49us/step\n",
      "Train member Nr 2/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 47us/step\n",
      "Train member Nr 3/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 54us/step\n",
      "Train member Nr 4/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 49us/step\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train member Nr 5/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 51us/step\n",
      "Computation time: 9.8s\n",
      "\n",
      "##################################################################\n",
      "Refit the model with best hyperparamters\n",
      "##################################################################\n",
      "\n",
      "{'layers': 1, 'neurons': 16, 'dropout': 0.30452543907304586, 'noise_in': 0.21534727932400557, 'noise_mu': 0.2830000465254644, 'noise_sigma': 0.20073478581880644, 'l1_hidden': 0.08204434904474006, 'l2_hidden': 0.15817156327512816, 'l1_mu': 0.044876511619725834, 'l2_mu': 0.07501615431427888, 'l1_sigma': 0.13807434833687507, 'l2_sigma': 0.003930864203235141, 'lr': 0.005892578009524626, 'batch_size': 100}\n",
      "Train member Nr 1/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 56us/step\n",
      "Train member Nr 2/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 47us/step\n",
      "Train member Nr 3/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 51us/step\n",
      "Train member Nr 4/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 50us/step\n",
      "Train member Nr 5/5\n",
      "--------------------------------------\n",
      "46/46 [==============================] - 0s 58us/step\n",
      "Computation time: 9.9s\n",
      "best loss search: 0.11411247535244277\n",
      "loss refitting : 0.14777255660813787\n"
     ]
    }
   ],
   "source": [
    "# initiated an instance of the DEM (Deep Ensemble Model) class\n",
    "model = DEM()\n",
    "\n",
    "# Set parameters\n",
    "model.set_parameters(layers=1, dropout=[0.1, 0.5], noise_in=[0.1,0.5], noise_sigma=[0.1,0.5],\n",
    "                     noise_mu=[0.1,0.5], l1_hidden=[0.0, 0.2], l2_hidden=[0, 0.2],\n",
    "                     l1_mu=[0.0, 0.2], l2_mu=[0.0, 0.2], l1_sigma=[0.0, 0.2],\n",
    "                     l2_sigma=[0.0, 0.2], lr=[0.0001,0.01], batch_size=100, epochs=500, n_segments=5,\n",
    "                     n_members_segment=1, patience=30, verbose=0, std=True)\n",
    "\n",
    "# Use a random search to find the optimal hyperparamteres\n",
    "model.fit_RandomizedSearch(train_val_X, train_val_y, n_iter=20)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Make predictions for the test data set\n",
    "Now we can use the trained models to make predicitons on the test data set to evaluate how good the model perfoms on a data set that it never saw before."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "from ninolearn.plot.evaluation import plot_correlation\n",
    "\n",
    "pred_mean, pred_std = model.predict(testX)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plot the prediction\n",
    "Let's see how the predicion is looking like"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7fd9fe77cb38>]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x252 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from ninolearn.plot.prediction import plot_prediction\n",
    "import pandas as pd\n",
    "\n",
    "plt.subplots(figsize=(15,3.5))\n",
    "plt.axhspan(-0.5,\n",
    "            -6,\n",
    "            facecolor='blue',\n",
    "            alpha=0.1,zorder=0)\n",
    "\n",
    "plt.axhspan(0.5,\n",
    "            6,\n",
    "            facecolor='red',\n",
    "            alpha=0.1,zorder=0)\n",
    "\n",
    "plt.xlim(testtimey[0], testtimey[-1])\n",
    "plt.ylim(-3,3)\n",
    "\n",
    "# plot the prediction\n",
    "plot_prediction(testtimey, pred_mean, std=pred_std, facecolor='royalblue', line_color='navy')\n",
    "\n",
    "# plot the observation\n",
    "plt.plot(timey, y, \"k\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Evaluate the model\n",
    "\n",
    "We can evaluate the model a bit more quantitatively using the loss function that was used to train the model, namely the negative-log-likelihood of the Gaussian and the correlation between the predicted mean and the observed ONI index."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss (Negative-Log-Likelihood): 0.1747595046770062\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x180 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "loss = model.evaluate(testy, pred_mean, pred_std)\n",
    "print(f\"Loss (Negative-Log-Likelihood): {loss}\")\n",
    "\n",
    "# make a plot of the seasonal correaltion\n",
    "# note: - pd.tseries.offsets.MonthBegin(1) appears to ensure that the correlations are plotted\n",
    "# agains the correct season\n",
    "plot_correlation(testy, pred_mean, testtimey - pd.tseries.offsets.MonthBegin(1), title=\"\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
